/*global variables are ones w/o classes and
 will apply to every whatever on the page*/
/*
a:hover{
  text-decoration: line-through;
  color: #000000;
}
*/
a{
  text-decoration: none;
  color: inherit;
}


body {
  background-color: #ffa3c4;
  /* font-family: monospace; */
}

.name{
  color: #e00000;
  font-family:monospace;
  font-weight: bolder;
  font-size: 50px;
  letter-spacing: 0px;
  text-shadow: 3px 3px #a30000;
  text-decoration: none;
  line-height: 40px;
  width: 150px ;
}

.name a:hover{
  color:#00604b;
  text-shadow: 3px 3px #002630;
}

.links{
  font-family:sans-serif;
  color: #ff6100;
  font-size: 26px;
  text-decoration: none;
  font-weight: bolder;
  text-transform: uppercase;
}

.links a:hover{
  color: #fff;
}

.links .right img{
  padding-right: 15px;
}

.madisonHeader {
  padding-bottom:15%;
  /* border: 3px solid black; */
}


.center {
    margin:auto;
    text-align: center;
    align-items: center;
    width:20%;
}

.right{
  position: absolute;
  right:1%;
  top:5%;
}

.left{
  position: absolute;
  left: 1%;
  top:5%;
}

.content{
  font-family: sans-serif;
  margin: auto;
  text-align: center;
  width:40%;
  color:teal;
}

.content a{
  text-decoration: underline;
  color: teal;
}
.content a:hover{
  text-decoration: underline;
  color: #fff;
}

/*
.box-1{      <!-- editing classes must hv . infront of it -->
  font-size: 50px;
  color: #ffffff;
  background-color: #000000;
  padding: 30px;
  margin: 120px;

}


.links ul{
  padding: 0px;
  align-items:center;
  list-style: square;
}

.links li{
  padding-bottom: 6px;
  border-bottom: dotted 2px #fff;
  border-bottom-width: thick;

}




tags < classes < id's



---CSS---
css edits style of HTML tags

---CLASSES---
not just limited to styling tags! can also style attributes (such as class)
to select a class to edit

.className

can add classes to specific HTML elements that're defined in css

---ID'S---
to style id tags (will be styled uniquely no matter
what other styling is applied)

#idName

CSS classes are meant to be reused over many elements, you can mix multiple classes
ID's are meant to be used only once (very sparingly), they override styles of classes and tags

---SPECIFITITY---
order in which the browser decides which CSS style will be used (hierarchy)
best practice is to style with the lowest specificity
so that if an element needs a new style it can be easily overriden



the only way to override an id is with another id

if two selectors target the same attribute the one furthest down in the stylesheet
win

---CHAINING SELECTORS---
for ex

h1.special {
  this code will only target the h1 elements that have a class of special, any other
  cases of special will not be affected
}

normal selectors < chained selectors < ID's

--NESTED ELEMENTS--
.main-list li {
  this code targets the li elements nested within the main-list, selecting elements
  in this way ensures they appear in the context we expect them to
}

---CHAINING AND SPECIFITITY---
the more specific the selector, the higher specificity therefore it'll take precedence


---IMPORTANT---
there is one thing more specific than id's: !important
!important can be applied to specific attributes instread of full rules,
it will override ANY style no matter how specific it is, it should almost never be used

--MULTIPLE SELECTORS--
to make css more concise its possible to add CSS styles to multiple CSS rules
    h1 {
      font-family: Georgia;
    }

    .menu {
      font-family: Georgia;
    }

can be rewritten to
    h1, .menu {
      font-family: Georgia;
    }







*/
